{"pageProps":{"article":{"blog_id":"aa6d33ed-f439-4fa4-9109-38427155b685","title":"Creating a Reusable React Layout Package via GitHub (Without npm Publish)","short_description":"If you often reuse the same Navbar, Footer, or other layout components across multiple React projects, maintaining them in each repo becomes redundant and error-prone. A better approach is to extract them into a shared GitHub package.","description":"<p>Do you copy-paste the same <strong>Navbar</strong>, <strong>Footer</strong>, or layout components into every React project you build? It works — but it’s messy and hard to maintain.</p><p>Here’s a better solution:</p><p><strong>- Turn your layout into a reusable component package stored in a GitHub repo</strong>, and install it into any project using npm install.</p><h1><strong>What You’ll Build</strong></h1><p>You’ll create a <strong>shared layout repo</strong> that:</p><p>✅ Exports components like<strong> &lt;Navigation/&gt; </strong>and <strong>&lt;Footer/&gt;</strong></p><p>✅ Can be installed via GitHub in any React project</p><p>✅ Can be versioned and updated cleanly using Git tags</p><h2><strong>1. Create the Shared Layout Project</strong></h2><p>You can use <a href=\"https://vitejs.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">Vite</a> to quickly scaffold a React setup:</p><div><pre><code>npm create vite@latest personal-shared-layout --template react\ncd personal-shared-layout\nnpm install\n</code></pre></div><p>Now, delete the default App.jsx, main.jsx, and create your own components:</p><div><pre><code>mkdir -p src/components\ntouch src/components/Navbar.jsx src/components/Footer.jsx src/index.js\n</code></pre></div><h2><strong>2. Add Your Components</strong></h2><p>Example: src/components/Navbar.jsx</p><div><pre><code>const Footer = () =&gt; (\n&nbsp; &lt;footer style={{ background: '#111', color: 'white', padding: '1rem' }}&gt;\n&nbsp; &nbsp; &lt;p&gt;© 2025 All rights reserved.&lt;/p&gt;\n&nbsp; &lt;/footer&gt;\n);\nexport default Footer;\n</code></pre></div><p>Export them in src/index.js</p><div><pre><code>export { default as Navbar } from './components/Navbar.jsx';\nexport { default as Footer } from './components/Footer.jsx';\n</code></pre></div><h2><strong>3. Configure package.json</strong></h2><p>Update your package.json to define the entry point and peer dependencies:</p><div><pre><code>{\n&nbsp; \"name\": \"personal-shared-layout\",\n&nbsp; \"version\": \"1.0.0\",\n&nbsp; \"type\": \"module\",\n&nbsp; \"main\": \"./src/index.js\",\n&nbsp; \"private\": false,\n&nbsp; \"peerDependencies\": {\n&nbsp; &nbsp; \"react\": \"^18.0.0\",\n&nbsp; &nbsp; \"react-dom\": \"^18.0.0\"\n&nbsp; }\n}\n</code></pre></div><p>✅ main must point to your src/index.js</p><p>✅ peerDependencies means the consuming app provides React.</p><h2><strong>4. Push It to GitHub</strong></h2><div><pre><code>git init\ngit remote add origin https://github.com/your-username/personal-shared-layout.git\ngit add .\ngit commit -m \"Initial layout package\"\ngit push -u origin main\n</code></pre></div><h2><strong>5. Tag a Version</strong></h2><p>Use Git tags for clean versioning:</p><div><pre><code>git tag v1.0.0\ngit push origin v1.0.0\n</code></pre></div><p>You can later tag new versions like v1.0.1, v2.0.0, etc.</p><h2><strong>6. Use It in Other Projects</strong></h2><p>In any React app:</p><div><pre><code>npm install git+https://github.com/your-username/personal-shared-layout.git#v1.0.0\n</code></pre></div><p>Then import your shared components:</p><div><pre><code>import { Navbar, Footer } from 'personal-shared-layout';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Navbar /&gt;\n      &lt;main&gt;My content&lt;/main&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre></div><h2><strong>7. Updating the Shared Layout</strong></h2><p>When you make changes to the shared repo:</p><div><pre><code># Commit your changes\ngit commit -am \"Add feature or fix\"\n\n# Tag a new version\ngit tag v1.0.1\ngit push origin v1.0.1\n</code></pre></div><p>Then in your other project:</p><div><pre><code>npm install git+https://github.com/your-username/personal-shared-layout.git#v1.0.1\n</code></pre></div><h2><strong>8. Bonus Tips</strong></h2><p>✅ Use SemVer (v1.0.0, v1.0.1, v2.0.0) for safe versioning.</p><p>✅ Pin versions with tags to avoid unexpected changes.</p><p>✅ You can later convert this into a real NPM package if needed.</p><h1><strong>&nbsp;Conclusion</strong></h1><p>By turning your layout components into a shared GitHub package, you eliminate copy-paste duplication, ensure consistent UI across projects, and make updates effortless. It's a simple but powerful way to scale your frontend development—clean, versioned, and reusable without needing to publish to npm.</p>","timestamp":"Sunday, May 4, 2025 at 10:42:53 AM GMT+8","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1746326014972_Github%20Packages.webp","image_alt":"Github Packaging","slug":"Creating-a-Reusable-React-Layout-Package-via-GitHub-Without-npm-Publish","index":"d4735e3a265e1","tags":["Github","Package","Library","Software Development","Frontend"]},"recommendedPosts":[{"blog_id":"f0946042-0217-47f4-9064-bb5740b6c72c","title":"How to Set Up Push Notifications in Expo with Firebase for Android (Production-Ready Guide)","short_description":"In this guide, you'll learn how to set up Expo push notifications for Android, including the correct use of Firebase Admin SDK credentials, how to upload them securely, and how to properly configure your Expo app.","timestamp":"2025-05-17 10:16:38","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747476529014_push_notif%20bg.jpg","image_alt":"push notif token expo bg","slug":"How-to-Set-Up-Push-Notifications-in-Expo-with-Firebase-for-Android-Production-Ready-Guide","index":"d4735e3a265e1","tags":["Frontend","Android","Mobile App","React Native"]},{"blog_id":"e7d3943c-c12a-42c1-9663-2d90449138dc","title":"The concept of splitting a frontend into smaller, manageable pieces.","short_description":"Have you ever worked on a massive frontend application where every change felt risky and deploying updates took ages? If so, micro frontends might be the solution you’ve been looking for","timestamp":"2024-12-04 03:23:45","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fmicrofrontend.webp?alt=media&token=6274c176-9622-4cd5-93be-9ea9e5912bd9","image_alt":"Microfrontend Image Cover","slug":"the-concept-of-splitting-a-frontend-into-smaller-manageable-pieces","index":"6b86b273ff34f","tags":["Frontend","Software Architecture","System Design"]},{"blog_id":"4a5ae2d7-0f8f-46b9-b49a-4ff130f22292","title":"Why You Need Kubernetes: A Comprehensive Guide","short_description":"In today's fast-paced digital landscape, applications are becoming increasingly complex and distributed. To manage this complexity and ensure high availability, reliability, and scalability, organizations are turning to Kubernetes. This powerful container orchestration platform has revolutionized the way we deploy and manage applications.","timestamp":"2024-11-02 15:48:06","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2FKubernetes-logo-1024x576.png?alt=media&token=e6f56ef1-e429-4d8f-9597-2d5a01023cf9","image_alt":"Kubernetes Logo","slug":"why-you-need-kubernetes-a-comprehensive-guide","index":"6b86b273ff34f","tags":["System Design","Software Architecture","Frontend"]}]},"__N_SSG":true}
{"pageProps":{"article":{"blog_id":"f0946042-0217-47f4-9064-bb5740b6c72c","title":"How to Set Up Push Notifications in Expo with Firebase for Android (Production-Ready Guide)","short_description":"In this guide, you'll learn how to set up Expo push notifications for Android, including the correct use of Firebase Admin SDK credentials, how to upload them securely, and how to properly configure your Expo app.","description":"<p>Push notifications are one of the most powerful ways to engage users in your mobile app. When building apps using the <strong>Expo managed workflow</strong>, Expo provides a convenient API to send and receive push notifications. However, when targeting <strong>Android devices in production</strong>, you need to configure <strong>Firebase Cloud Messaging (FCM)</strong> properly — particularly using <strong>FCM V1</strong>, which is now the recommended and secure approach.</p><h2><strong>How it Works?</strong></h2><p><img src=\"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747476525287_push%20notif%20token%20expo.png\" alt=\"structure of push notification token using expo\" width=\"720px\"></p><p>Push notifications rely on a unique identifier called a push token to deliver messages to the right device. In the Expo ecosystem, as shown in the diagram, this process starts when your backend sends a notification. For example, imagine someone likes Brent's puppy photo and wants to notify him with a message like \"Puppy!\" The backend constructs a payload that includes Brent's Expo push token (e.g., \"ExponentPushToken[I22V7M...]\"), the message \"Puppy!\", and additional data like the photo ID. This push token, which Expo generates for each device when the app registers for notifications, acts as a device-specific address. Expo's push notification service receives this payload and uses the token to determine the target device. If Brent's device is Android, Expo forwards the notification to Firebase Cloud Messaging (FCM); if it's iOS, it routes to Apple Push Notification Service (APNS). The respective service then delivers the \"Puppy!\" notification to Brent's device, ensuring he gets the message. This guide will walk you through setting up this process for Android using Expo and Firebase.<span class=\"ql-cursor\">﻿</span></p><h2><strong>Getting Started with Expo Notifications</strong></h2><p>First, make sure your project is set up correctly. If you're starting from scratch, create a new Expo project and install the notifications package:</p><div><pre><code>npx create-expo-app my-app\ncd my-app\nnpx expo install expo-notifications\n</code></pre></div><p>Inside your app, you’ll need to request push notification permissions and fetch the Expo push token. This token is what uniquely identifies each device and allows Expo to send notifications to it. Here's a basic helper function to handle this setup:</p><div><pre><code>import * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\n\n\nexport async function registerForPushNotificationsAsync() {\n&nbsp; if (!Device.isDevice) return null;\n\n\n&nbsp; const { status: existingStatus } = await Notifications.getPermissionsAsync();\n&nbsp; const finalStatus = existingStatus === 'granted'\n&nbsp; &nbsp; ? existingStatus\n&nbsp; &nbsp; : (await Notifications.requestPermissionsAsync()).status;\n\n\n&nbsp; if (finalStatus !== 'granted') return null;\n\n\n&nbsp; const token = (await Notifications.getExpoPushTokenAsync()).data;\n&nbsp; return token;\n}\n</code></pre></div><h2><strong>Setting Up Firebase Admin SDK Credentials</strong></h2><p>To send notifications on Android devices, Expo communicates with Firebase Cloud Messaging (FCM) on your behalf. To enable this securely, you need to provide Expo with Firebase Admin SDK credentials, which come in the form of a JSON file.</p><p>Go to your Firebase Console, open your project, and navigate to Project Settings &gt; Service Accounts. Click on “Generate new private key”, which will download a JSON file. This file includes the necessary authentication information Expo uses to send push notifications via the FCM V1 API.</p><p>It’s important to note that this is not the same as the google-services.json file used for initializing Firebase in Android apps. The Admin SDK JSON is a private key meant for server-side use and should be kept secure.</p><h2><strong>Uploading Credentials to Expo</strong></h2><p>Once you have the Firebase Admin SDK JSON file, you need to upload it to Expo. This allows Expo to authenticate with Firebase when sending push notifications to Android devices.</p><p>If you're using the latest Expo toolchain, the recommended way to do this is with <strong><em>eas</em></strong>:</p><div><pre><code>eas credentials -p android\n</code></pre></div><p>During the prompt, choose the option to <strong>Upload FCM V1 service account key</strong>, and select the Admin SDK JSON file you downloaded earlier. Alternatively, if you're still using the classic Expo CLI, you can run:</p><div><pre><code>npx expo push:android:upload --firebase-json ./firebase-adminsdk.json\n</code></pre></div><p>This upload is a one-time setup unless you rotate your Firebase keys.</p><h2><strong>Configuring app.json or app.config.js</strong></h2><p>To complete the setup, you also need to configure your app.json or app.config.js to inform Expo about the notification settings and include your google-services.json file, which is still required for Android builds.</p><p>Here’s an example configuration:</p><div><pre><code>{\n&nbsp; \"expo\": {\n&nbsp; &nbsp; \"android\": {\n&nbsp; &nbsp; &nbsp; \"googleServicesFile\": \"./google-services.json\",\n&nbsp; &nbsp; &nbsp; \"useNextNotificationsApi\": true\n&nbsp; &nbsp; },\n&nbsp; &nbsp; \"notification\": {\n&nbsp; &nbsp; &nbsp; \"icon\": \"./assets/notification-icon.png\",\n&nbsp; &nbsp; &nbsp; \"color\": \"#ffffff\"\n&nbsp; &nbsp; },\n&nbsp; &nbsp; \"plugins\": [\n&nbsp; &nbsp; &nbsp; \"@react-native-firebase/app\",\n&nbsp; &nbsp; &nbsp; \"@react-native-firebase/messaging\"\n&nbsp; &nbsp; ]\n&nbsp; }\n}\n</code></pre></div><p>This tells Expo to include the required Firebase files and notification settings in your Android build. The \"useNextNotificationsApi\": true flag ensures that Expo uses the newer Android notification APIs, which are compatible with Firebase’s latest messaging platform.</p><h2><strong>Sending Push Notifications</strong></h2><p>With everything configured, your app will be able to register for push notifications and receive an Expo push token. To send a notification, you can use Expo's hosted API endpoint:</p><div><pre><code>POST https://exp.host/--/api/v2/push/send\n</code></pre></div><p>Send a POST request with a JSON payload like the following:</p><div><pre><code>{\n&nbsp; \"to\": \"ExponentPushToken[xxxxxxxxxxxxxx]\",\n&nbsp; \"title\": \"Hello!\",\n&nbsp; \"body\": \"This is a test push notification.\"\n}\n</code></pre></div><p>You can send this request using any HTTP client like axios, fetch, or even from your backend server. The Expo push service will handle communication with Firebase for you, using the credentials you uploaded earlier.</p><h2><strong>When Is Firebase Admin SDK Needed?</strong></h2><p>To clarify, the <strong>Firebase Admin SDK</strong> is not required in your app code or for sending notifications manually. It’s only needed during the one-time credential upload process so that Expo can authenticate with Firebase’s FCM V1 API. You don't need to include it in your frontend app or backend unless you're planning to send notifications directly via Firebase without going through Expo.</p><h2><strong>Final Thoughts</strong></h2><p>Using Expo’s push notification system with Firebase is straightforward once the initial setup is done. The key steps are generating the correct Admin SDK credentials, uploading them securely via eas, and properly configuring your project with both the firebase-adminsdk.json and google-services.json files.</p><p>By following this process, you can deliver reliable and scalable push notifications to your Android users while keeping your setup clean, secure, and aligned with Firebase's best practices.</p>","timestamp":"Saturday, May 17, 2025 at 6:16:38 PM GMT+8","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747476529014_push_notif%20bg.jpg","image_alt":"push notif token expo bg","slug":"How-to-Set-Up-Push-Notifications-in-Expo-with-Firebase-for-Android-Production-Ready-Guide","index":"d4735e3a265e1","tags":["Frontend","Android","Mobile App","React Native"]},"recommendedPosts":[{"blog_id":"aa6d33ed-f439-4fa4-9109-38427155b685","title":"Creating a Reusable React Layout Package via GitHub (Without npm Publish)","short_description":"If you often reuse the same Navbar, Footer, or other layout components across multiple React projects, maintaining them in each repo becomes redundant and error-prone. A better approach is to extract them into a shared GitHub package.","timestamp":"2025-05-04 02:42:53","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1746326014972_Github%20Packages.webp","image_alt":"Github Packaging","slug":"Creating-a-Reusable-React-Layout-Package-via-GitHub-Without-npm-Publish","index":"d4735e3a265e1","tags":["Github","Package","Library","Software Development","Frontend"]},{"blog_id":"e7d3943c-c12a-42c1-9663-2d90449138dc","title":"The concept of splitting a frontend into smaller, manageable pieces.","short_description":"Have you ever worked on a massive frontend application where every change felt risky and deploying updates took ages? If so, micro frontends might be the solution you’ve been looking for","timestamp":"2024-12-04 03:23:45","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fmicrofrontend.webp?alt=media&token=6274c176-9622-4cd5-93be-9ea9e5912bd9","image_alt":"Microfrontend Image Cover","slug":"the-concept-of-splitting-a-frontend-into-smaller-manageable-pieces","index":"6b86b273ff34f","tags":["Frontend","Software Architecture","System Design"]},{"blog_id":"4a5ae2d7-0f8f-46b9-b49a-4ff130f22292","title":"Why You Need Kubernetes: A Comprehensive Guide","short_description":"In today's fast-paced digital landscape, applications are becoming increasingly complex and distributed. To manage this complexity and ensure high availability, reliability, and scalability, organizations are turning to Kubernetes. This powerful container orchestration platform has revolutionized the way we deploy and manage applications.","timestamp":"2024-11-02 15:48:06","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2FKubernetes-logo-1024x576.png?alt=media&token=e6f56ef1-e429-4d8f-9597-2d5a01023cf9","image_alt":"Kubernetes Logo","slug":"why-you-need-kubernetes-a-comprehensive-guide","index":"6b86b273ff34f","tags":["System Design","Software Architecture","Frontend"]}]},"__N_SSG":true}